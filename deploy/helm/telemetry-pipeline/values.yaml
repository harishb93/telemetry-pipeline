# Default values for telemetry-pipeline.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Override names
nameOverride: ""
fullnameOverride: ""

# Common image pull secrets
imagePullSecrets: []
# - name: myregistrykey

# Service Account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # Labels to add to the service account
  labels: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Message Queue configuration
mq:
  # Port for the message broker
  port: 9000
  # Topics for telemetry data
  topics:
    - "gpu-telemetry"
    - "system-metrics"
  
  # MQ persistence configuration
  persistence:
    # Enable persistence for message queue
    enabled: true
    # Persistent Volume size
    size: 5Gi
    # Storage class for the PVC
    storageClass: ""
    # Access modes for the PVC
    accessModes:
      - ReadWriteOnce
    # Annotations for the PVC
    annotations: {}
    # Selector for the PVC
    selector: {}
    # Directory inside container for MQ data
    dir: "/var/lib/mq"

# Telemetry Streamer configuration (DaemonSet)
streamer:
  # Enable telemetry streamer
  enabled: true
  
  # Container image
  image:
    registry: docker.io
    repository: telemetry-pipeline/telemetry-streamer
    tag: ""
    pullPolicy: IfNotPresent
  
  # Streamer configuration
  rate: 10.0  # Messages per second per worker
  workers: 2  # Number of workers per node
  metricsPort: 9090
  
  # CSV data for streaming (can be overridden with configmap or PVC)
  csvData: |
    gpu_id,utilization,temperature,memory_used
    gpu-001,85.5,72.3,4096
    gpu-002,90.2,75.1,8192
    gpu-003,45.0,65.0,2048
    gpu-004,78.3,70.5,6144
  
  # Additional configuration
  config: {}
    # custom_field: value
  
  # Extra arguments for the streamer
  extraArgs: []
  
  # Environment variables
  env: []
  # - name: ENV_VAR
  #   value: "value"
  
  # Pod annotations
  podAnnotations: {}
  
  # Pod labels
  podLabels: {}
  
  # Pod Security Context
  podSecurityContext:
    fsGroup: 2000
  
  # Container Security Context
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
  
  # Resources
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Node selector
  nodeSelector: {}
  
  # Affinity
  affinity: {}
  
  # Tolerations
  tolerations: []
  
  # Volume mounts
  volumeMounts: []
  
  # Volumes
  volumes: []
  
  # Update strategy
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  
  # Persistence for streamer state
  persistence:
    enabled: false
    size: 1Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    annotations: {}
    selector: {}
  
  # Service configuration
  service:
    type: ClusterIP
    port: 9090
    annotations: {}
    # loadBalancerIP: ""
    # loadBalancerSourceRanges: []
    # clusterIP: ""
    # externalIPs: []
    # nodePort: 30090
    extraPorts: []
  
  # Health checks
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Telemetry Collector configuration (Deployment)
collector:
  # Enable telemetry collector
  enabled: true
  
  # Replica count
  replicaCount: 1
  
  # Container image
  image:
    registry: docker.io
    repository: telemetry-pipeline/telemetry-collector
    tag: ""
    pullPolicy: IfNotPresent
  
  # Collector configuration
  workers: 4
  maxEntriesPerGPU: 10000
  checkpointEnabled: true
  healthPort: 8080
  metricsPort: 9091
  
  # Additional configuration
  config: {}
  
  # Extra arguments for the collector
  extraArgs: []
  
  # Environment variables
  env: []
  
  # Pod annotations
  podAnnotations: {}
  
  # Pod labels
  podLabels: {}
  
  # Pod Security Context
  podSecurityContext:
    fsGroup: 2000
  
  # Container Security Context
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
  
  # Resources
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  # Node selector
  nodeSelector: {}
  
  # Affinity
  affinity: {}
  
  # Tolerations
  tolerations: []
  
  # Volume mounts
  volumeMounts: []
  
  # Volumes
  volumes: []
  
  # Persistence for collector data
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    annotations: {}
    selector: {}
  
  # Service configuration
  service:
    type: ClusterIP
    healthPort: 8080
    brokerPort: 9000
    metricsPort: 9091
    annotations: {}
    # loadBalancerIP: ""
    # loadBalancerSourceRanges: []
    # clusterIP: ""
    # externalIPs: []
    # healthNodePort: 30080
    # brokerNodePort: 30900
    # metricsNodePort: 30091
    extraPorts: []
  
  # Health checks
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  # Autoscaling
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

# API Gateway configuration (Deployment)
apiGateway:
  # Enable API gateway
  enabled: true
  
  # Replica count
  replicaCount: 2
  
  # Container image
  image:
    registry: docker.io
    repository: telemetry-pipeline/api-gateway
    tag: ""
    pullPolicy: IfNotPresent
  
  # API Gateway configuration
  port: 8081
  metricsPort: 9092
  
  # CORS configuration
  cors:
    enabled: true
    allowedOrigins:
      - "*"
    allowedMethods:
      - "GET"
      - "POST"
      - "PUT"
      - "DELETE"
      - "OPTIONS"
    allowedHeaders:
      - "Content-Type"
      - "Authorization"
      - "X-Requested-With"
  
  # Additional configuration
  config: {}
  
  # Extra arguments for the API gateway
  extraArgs: []
  
  # Environment variables
  env: []
  
  # Pod annotations
  podAnnotations: {}
  
  # Pod labels
  podLabels: {}
  
  # Pod Security Context
  podSecurityContext:
    fsGroup: 2000
  
  # Container Security Context
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
  
  # Resources
  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 150m
      memory: 256Mi
  
  # Node selector
  nodeSelector: {}
  
  # Affinity
  affinity: {}
  
  # Tolerations
  tolerations: []
  
  # Volume mounts
  volumeMounts: []
  
  # Volumes
  volumes: []
  
  # Service configuration
  service:
    type: ClusterIP
    port: 80
    metricsPort: 9092
    annotations: {}
    # loadBalancerIP: ""
    # loadBalancerSourceRanges: []
    # clusterIP: ""
    # externalIPs: []
    # nodePort: 30081
    # metricsNodePort: 30092
    extraPorts: []
  
  # Ingress configuration
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: telemetry-api.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: telemetry-api-tls
    #    hosts:
    #      - telemetry-api.local
  
  # Health checks
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  # Autoscaling
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

# NetworkPolicy configuration (optional)
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  
  # Ingress rules
  ingress: []
  # - from:
  #   - namespaceSelector:
  #       matchLabels:
  #         name: allowed-namespace
  #   ports:
  #   - protocol: TCP
  #     port: 8080
  
  # Egress rules
  egress: []
  # - to:
  #   - namespaceSelector:
  #       matchLabels:
  #         name: allowed-namespace
  #   ports:
  #   - protocol: TCP
  #     port: 8080

# PodDisruptionBudget configuration
podDisruptionBudget:
  enabled: false
  # minAvailable: 1
  # maxUnavailable: 1

# Monitoring configuration
monitoring:
  # Enable ServiceMonitor for Prometheus
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    # release: prometheus
  
  # Enable PodMonitor for Prometheus
  podMonitor:
    enabled: false
    interval: 30s
    labels: {}
  
  # Grafana dashboard
  grafana:
    enabled: false
    dashboardsConfigMap: ""

# Security configuration
security:
  # Pod Security Standards
  podSecurityStandards:
    enabled: false
    enforce: "restricted"
    audit: "restricted"
    warn: "restricted"
  
  # Security Context Constraints (OpenShift)
  securityContextConstraints:
    enabled: false
    name: "restricted"